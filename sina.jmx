<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">class=\\&quot;WB_text(.+?)&lt;(div |i )</stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="startTime" elementType="Argument">
            <stringProp name="Argument.name">startTime</stringProp>
            <stringProp name="Argument.value">2020-09-03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endTime" elementType="Argument">
            <stringProp name="Argument.name">endTime</stringProp>
            <stringProp name="Argument.value">2020-09-03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">当前时间使用${__time(yyyy-MM-dd,)}</stringProp>
          </elementProp>
          <elementProp name="deleteGap" elementType="Argument">
            <stringProp name="Argument.name">deleteGap</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.desc">删除距离今天多少天前的</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timerDuration" elementType="Argument">
            <stringProp name="Argument.name">timerDuration</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.desc">毫定时器间隔多少毫秒（ms）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="searchText" elementType="Argument">
            <stringProp name="Argument.name">searchText</stringProp>
            <stringProp name="Argument.value">不过滤</stringProp>
            <stringProp name="Argument.desc">搜索关键字</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cookies" elementType="Argument">
            <stringProp name="Argument.name">cookies</stringProp>
            <stringProp name="Argument.value">SINAGLOBAL=37089483263.85686.1597846118028; UOR=,,www.baidu.com; wvr=6; wb_timefeed_5240852795=1; Ugrow-G0=1ac418838b431e81ff2d99457147068c; login_sid_t=f24f76f737e40d73f3ddeea142c72f3a; cross_origin_proto=SSL; YF-V5-G0=3751b8b40efecee990eab49e8d3b3354; WBStorage=70753a84f86f85ff|undefined; _s_tentry=passport.weibo.com; wb_view_log=1366*7681; Apache=1166662750203.531.1599149622267; ULV=1599149622274:19:2:4:1166662750203.531.1599149622267:1598976745379; SUB=_2A25yVWYNDeRhGeNM71IZ9SzLwjmIHXVRI9DFrDV8PUNbmtAKLRPtkW9NTgPndiBeD5HgZFFQVVvGl-6eS0XDEZmO; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9WFHe8sUxIJF5SEcjA7MyoiM5JpX5KzhUgL.Fo-ESh5RSKzN1K-2dJLoIXXLxKqLBonL1h-LxK.LBKeL12-LxKML1heL1hnLxK.L1h-L1KzLxK-LB-BLBKBLxKML12zLB-eLxKBLBonLB.2LxK-L12qL12zEe0e0e7tt; SUHB=0oUYMUGs8Z9hSc; ALF=1630685661; SSOLoginState=1599149661</stringProp>
            <stringProp name="Argument.desc">cookies 目前不知道多久变一次</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="cookie" elementType="Header">
            <stringProp name="Header.name">cookie</stringProp>
            <stringProp name="Header.value">${cookies}</stringProp>
          </elementProp>
          <elementProp name="user-agent" elementType="Header">
            <stringProp name="Header.name">user-agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="origin" elementType="Header">
            <stringProp name="Header.name">origin</stringProp>
            <stringProp name="Header.value">https://weibo.com</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">referer</stringProp>
            <stringProp name="Header.value">https://weibo.com/5240852795/profile?rightmod=1&amp;wvr=6&amp;mod=personnumber&amp;is_all=1</stringProp>
          </elementProp>
          <elementProp name="x-requested-with" elementType="Header">
            <stringProp name="Header.name">x-requested-with</stringProp>
            <stringProp name="Header.value">XMLHttpRequest</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setup 删除多少天前的转发微博" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取要删除微博的日期" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取要删除微博的日期" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.*;
import java.text.SimpleDateFormat;

int gap = 0 - ${deleteGap};
Calendar calendar = Calendar.getInstance();
calendar.add(Calendar.DATE, gap);

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String beforeTime = sdf.format(calendar.getTime());

// 设置全局的日期
vars.put(&quot;beforeTime&quot;, beforeTime);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="初始循环参数" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;flag&quot;, &quot;true&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While 循环搜索指定日期之前的所有微博" enabled="true">
          <stringProp name="WhileController.condition">${flag}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="循环第${__counter(TRUE,)}次搜索自己某个日期前的所有微博" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Pl_Official_MyProfileFeed__20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pids</stringProp>
                </elementProp>
                <elementProp name="is_ori" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_ori</stringProp>
                </elementProp>
                <elementProp name="is_forward" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_forward</stringProp>
                </elementProp>
                <elementProp name="is_text" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_text</stringProp>
                </elementProp>
                <elementProp name="is_pic" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_pic</stringProp>
                </elementProp>
                <elementProp name="is_video" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_video</stringProp>
                </elementProp>
                <elementProp name="is_music" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_music</stringProp>
                </elementProp>
                <elementProp name="is_article" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_article</stringProp>
                </elementProp>
                <elementProp name="key_word" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">key_word</stringProp>
                </elementProp>
                <elementProp name="start_time" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">start_time</stringProp>
                </elementProp>
                <elementProp name="end_time" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${beforeTime}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">end_time</stringProp>
                </elementProp>
                <elementProp name="gid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">gid</stringProp>
                </elementProp>
                <elementProp name="is_new" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_new</stringProp>
                </elementProp>
                <elementProp name="is_search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_search</stringProp>
                </elementProp>
                <elementProp name="is_searchadv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_searchadv</stringProp>
                </elementProp>
                <elementProp name="ajaxpagelet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ajaxpagelet</stringProp>
                </elementProp>
                <elementProp name="ajaxpagelet_v6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ajaxpagelet_v6</stringProp>
                </elementProp>
                <elementProp name="__ref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__ref</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/5240852795/profile</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将响应结果 unicode 转成中文" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String s=new String(prev.getResponseData(),&quot;UTF-8&quot;);
char aChar;
int len= s.length();
StringBuffer outBuffer=new StringBuffer(len);
for(int x =0; x &lt;len;){
  aChar= s.charAt(x++);
  if(aChar==&apos;\\&apos;){
      aChar= s.charAt(x++);
      if(aChar==&apos;u&apos;){
          int value =0;
          for(int i=0;i&lt;4;i++){
              aChar= s.charAt(x++);
              switch(aChar){
                  case&apos;0&apos;:
                  case&apos;1&apos;:
                  case&apos;2&apos;:
                  case&apos;3&apos;:
                  case&apos;4&apos;:
                  case&apos;5&apos;:
                  case&apos;6&apos;:
                  case&apos;7&apos;:
                  case&apos;8&apos;:
                  case&apos;9&apos;:
                      value=(value &lt;&lt;4)+aChar-&apos;0&apos;;
                      break;
                  case&apos;a&apos;:
                  case&apos;b&apos;:
                  case&apos;c&apos;:
                  case&apos;d&apos;:
                  case&apos;e&apos;:
                  case&apos;f&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;a&apos;;
                      break;
                  case&apos;A&apos;:
                  case&apos;B&apos;:
                  case&apos;C&apos;:
                  case&apos;D&apos;:
                  case&apos;E&apos;:
                  case&apos;F&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;A&apos;;
                      break;
                  default:
                      throw new IllegalArgumentException(
                              &quot;Malformed   \\uxxxx  encoding.&quot;);}}
          outBuffer.append((char) value);}else{
          if(aChar==&apos;t&apos;)
              aChar=&apos;\t&apos;;
          else if(aChar==&apos;r&apos;)
          aChar=&apos;\r&apos;;
          else if(aChar==&apos;n&apos;)
          aChar=&apos;\n&apos;;
          else if(aChar==&apos;f&apos;)
          aChar=&apos;\f&apos;;
          outBuffer.append(aChar);}}else
      outBuffer.append(aChar);}
prev.setResponseData(outBuffer.toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取 mid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">deleteMid</stringProp>
              <stringProp name="RegexExtractor.regex">(?s)&lt;div(.+?)class=&quot;WB_cardwrap(.+?)mid=&quot;(\d+?)&quot;(.+?)&gt;(.+?)&lt;div(.+?)class=&quot;WB_text(.+?)&lt;div class=&quot;WB_like</stringProp>
              <stringProp name="RegexExtractor.template">$3$,$7$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="重新设置 while 循环搜索条件" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//log.info(&quot;!!!!!!!!!!!!!!!!!&quot;+vars.get(&quot;deleteMid&quot;));
if (vars.get(&quot;deleteMid_1_g3&quot;) == null) {
	vars.put(&quot;flag&quot;, &quot;false&quot;);
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if 若 mid 没删完" enabled="true">
            <stringProp name="IfController.condition">${flag}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除微博（指定日期之前所有）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deleteMid_1_g3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/aj/mblog/del?ajwvr=6</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 状态码提取" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">codeStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="0.1s" enabled="true">
                <stringProp name="ConstantTimer.delay">${timerDuration}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if 产生失败的状态码后需要休眠" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(${codeStatus}!=100000)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="----------休息----------" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定延时 65min" enabled="true">
                  <stringProp name="TestPlan.comments">定时器一定要有 sampler 触发</stringProp>
                  <stringProp name="ConstantTimer.delay">3900000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="抽奖转发以及原创来躲过滤" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登录接口测试" enabled="false"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="ALC" elementType="Cookie" testname="ALC">
                <stringProp name="Cookie.value">ac%3D2%26bt%3D1597846997%26cv%3D5.0%26et%3D1629382997%26ic%3D1873999712%26login_time%3D1597846996%26scf%3D%26uid%3D5240852795%26vf%3D0%26vs%3D1%26vt%3D0%26es%3D2038507be786dbd36f594c2da1f0be5b</stringProp>
                <stringProp name="Cookie.domain">.login.sina.com.cn</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="LT" elementType="Cookie" testname="LT">
                <stringProp name="Cookie.value">1597846997</stringProp>
                <stringProp name="Cookie.domain">.login.sina.com.cn</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="tgc" elementType="Cookie" testname="tgc">
                <stringProp name="Cookie.value">TGT-NTI0MDg1Mjc5NQ==-1597846996-gz-80D5CC222F384B5350618600648AC8A8-1</stringProp>
                <stringProp name="Cookie.domain">.login.sina.com.cn</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="ALF" elementType="Cookie" testname="ALF">
                <stringProp name="Cookie.value">1629382997</stringProp>
                <stringProp name="Cookie.domain">.sina.com.cn</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="SUB" elementType="Cookie" testname="SUB">
                <stringProp name="Cookie.value">_2A25yOUWFDeRhGeNM71IZ9SzLwjmIHXVRTzBNrDV_PUNbm9AfLWX-kW9NTgPndg0OpDRIweVpLFk1c7LXcm2nhU5E</stringProp>
                <stringProp name="Cookie.domain">.sina.com.cn</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="SUBP" elementType="Cookie" testname="SUBP">
                <stringProp name="Cookie.value">0033WrSXqPxfM725Ws9jqgMF55529P9D9WFHe8sUxIJF5SEcjA7MyoiM5JpX5KzhUgL.Fo-ESh5RSKzN1K-2dJLoIXXLxKqLBonL1h-LxK.LBKeL12-LxKML1heL1hnLxK.L1h-L1KzLxK-LB-BLBKBLxKML12zLB-eLxKBLBonLB.2LxK-L12qL12zEe0e0e7tt</stringProp>
                <stringProp name="Cookie.domain">.sina.com.cn</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendCode" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="encrypt_mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">\u624b\u673a\u53f7\u683c\u5f0f\u9519\u8bef</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypt_mobile</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">passport.weibo.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/protection/mobile/sendcode?token=2YzFfPTUsAFCaPhBHrAEVEZj0oddUxPXICnByb3RlY3Rpb24.</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="confirmCode" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="encrypt_mobile: 9f6354c5a451" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypt_mobile: 9f6354c5a451</stringProp>
                </elementProp>
                <elementProp name="code: 771723" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code: 771723</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">passport.weibo.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/protection/mobile/confirm?token=2YzFfPTUsAFCaPhBHrAEVEZj0oddUxPXICnByb3RlY3Rpb24.</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loginByCode" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/u/5240852795/home?wvr=5</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="搜索当天关注人的微博并筛选抽奖微博" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="搜索当天关注人的抽奖微博" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="搜索当天关注人的微博（最多拿到 15 条数据）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Pl_Content_HomeFeed</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pids</stringProp>
                  </elementProp>
                  <elementProp name="is_ori" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_ori</stringProp>
                  </elementProp>
                  <elementProp name="is_text" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_text</stringProp>
                  </elementProp>
                  <elementProp name="is_pic" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_pic</stringProp>
                  </elementProp>
                  <elementProp name="is_video" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_video</stringProp>
                  </elementProp>
                  <elementProp name="is_music" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_music</stringProp>
                  </elementProp>
                  <elementProp name="is_article" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_article</stringProp>
                  </elementProp>
                  <elementProp name="key_word" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${searchText}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">key_word</stringProp>
                  </elementProp>
                  <elementProp name="start_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${startTime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">start_time</stringProp>
                  </elementProp>
                  <elementProp name="end_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${endTime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_time</stringProp>
                  </elementProp>
                  <elementProp name="gid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">gid</stringProp>
                  </elementProp>
                  <elementProp name="is_new" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_new</stringProp>
                  </elementProp>
                  <elementProp name="is_search" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_search</stringProp>
                  </elementProp>
                  <elementProp name="is_searchadv" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_searchadv</stringProp>
                  </elementProp>
                  <elementProp name="ajaxpagelet" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ajaxpagelet</stringProp>
                  </elementProp>
                  <elementProp name="ajaxpagelet_v6" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ajaxpagelet_v6</stringProp>
                  </elementProp>
                  <elementProp name="__ref" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">__ref</stringProp>
                  </elementProp>
                  <elementProp name="_t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">gbk</stringProp>
              <stringProp name="HTTPSampler.path">/u/5240852795/home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将响应结果 unicode 转成中文" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String s=new String(prev.getResponseData(),&quot;UTF-8&quot;);
        char aChar;
        int len= s.length();
        StringBuffer outBuffer=new StringBuffer(len);
        for(int x =0; x &lt;len;){
            aChar= s.charAt(x++);
            if(aChar==&apos;\\&apos;){
                aChar= s.charAt(x++);
                if(aChar==&apos;u&apos;){
                    int value =0;
                    for(int i=0;i&lt;4;i++){
                        aChar= s.charAt(x++);
                        switch(aChar){
                            case&apos;0&apos;:
                            case&apos;1&apos;:
                            case&apos;2&apos;:
                            case&apos;3&apos;:
                            case&apos;4&apos;:
                            case&apos;5&apos;:
                            case&apos;6&apos;:
                            case&apos;7&apos;:
                            case&apos;8&apos;:
                            case&apos;9&apos;:
                                value=(value &lt;&lt;4)+aChar-&apos;0&apos;;
                                break;
                            case&apos;a&apos;:
                            case&apos;b&apos;:
                            case&apos;c&apos;:
                            case&apos;d&apos;:
                            case&apos;e&apos;:
                            case&apos;f&apos;:
                                value=(value &lt;&lt;4)+10+aChar-&apos;a&apos;;
                                break;
                            case&apos;A&apos;:
                            case&apos;B&apos;:
                            case&apos;C&apos;:
                            case&apos;D&apos;:
                            case&apos;E&apos;:
                            case&apos;F&apos;:
                                value=(value &lt;&lt;4)+10+aChar-&apos;A&apos;;
                                break;
                            default:
                                throw new IllegalArgumentException(
                                        &quot;Malformed   \\uxxxx  encoding.&quot;);}}
                    outBuffer.append((char) value);}else{
                    if(aChar==&apos;t&apos;)
                        aChar=&apos;\t&apos;;
                    else if(aChar==&apos;r&apos;)
                    aChar=&apos;\r&apos;;
                    else if(aChar==&apos;n&apos;)
                    aChar=&apos;\n&apos;;
                    else if(aChar==&apos;f&apos;)
                    aChar=&apos;\f&apos;;
                    outBuffer.append(aChar);}}else
                outBuffer.append(aChar);}
        prev.setResponseData(outBuffer.toString());</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取 mid" enabled="true">
                <stringProp name="TestPlan.comments">&lt;div(.+?)class=\\&quot;WB_cardwrap(.+?)mid=\\&quot;(\d+?)\\&quot;(.+?)&gt;(.+?)&lt;div(.+?)class=\\&quot;WB_text(.+?)&lt;div class=\\&quot;WB_like</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">mid</stringProp>
                <stringProp name="RegexExtractor.regex">(?s)&lt;div(.+?)class=&quot;WB_cardwrap(.+?)mid=&quot;(\d+?)&quot;(.+?)&gt;(.+?)&lt;div(.+?)class=&quot;WB_text(.+?)&lt;div class=&quot;WB_like</stringProp>
                <stringProp name="RegexExtractor.template">$3$,$7$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="获取 firstMid 和 lastMid 和 pageBar（会作为下拉接口的参数）" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// 设置第一个 mid
vars.put(&quot;firstMid&quot;, vars.get(&quot;mid_1_g3&quot;));
// 设置最后一个 mid
vars.put(&quot;lastMid&quot;, vars.get(&quot;mid_&quot; + vars.get(&quot;mid_matchNr&quot;) + &quot;_g3&quot;));
// 设置 pageBar 变量初始值为 0
vars.put(&quot;pageBar&quot;, &quot;0&quot;);

/**
 * 参数解释：
 * 
 * firstMid：搜索出的第一个 mid 信息
 * 
 * lastMid：搜索出的最后一个 mid 信息，一般来讲如果微博数量足够多，最多只能返回 15 个 mid，所以一般这是第 15 个
 */</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将 mid 的个数保存为变量" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// 获取当前 mid 有多少个
vars.put(&quot;currentMidCount&quot;, vars.get(&quot;mid_matchNr&quot;));

/**
 * 参数解释：
 * 
 * currentMidCount：${mid_matchNr}
 */</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取 blogCount" enabled="true">
                <stringProp name="TestPlan.comments">&gt;17&lt;\/em&gt;条微博</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">blogCount</stringProp>
                <stringProp name="RegexExtractor.regex">&gt;(\d+?)&lt;/em&gt;条微博</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="依据当天微博数计算下拉次数" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// 计算下拉刷新的次数 (${blogCount} - 1) / 15;
int count = (${blogCount} - 1) / 15;
vars.put(&quot;freshCount&quot;, &quot;&quot; + count);

/**
 * 参数解释：
 * 
 * freshCount：刷新的次数，下面要用
 */</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环不断下拉显示更多微博" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${freshCount}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="已获取${currentMidCount}条，再下拉刷出更多微博，第${__counter(TRUE,)}次下拉" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ajwvr" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ajwvr</stringProp>
                  </elementProp>
                  <elementProp name="pre_page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pre_page</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="end_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${firstMid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_id</stringProp>
                  </elementProp>
                  <elementProp name="min_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lastMid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">min_id</stringProp>
                  </elementProp>
                  <elementProp name="is_ori" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_ori</stringProp>
                  </elementProp>
                  <elementProp name="is_text" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_text</stringProp>
                  </elementProp>
                  <elementProp name="is_pic" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_pic</stringProp>
                  </elementProp>
                  <elementProp name="is_video" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_video</stringProp>
                  </elementProp>
                  <elementProp name="is_music" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_music</stringProp>
                  </elementProp>
                  <elementProp name="is_article" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_article</stringProp>
                  </elementProp>
                  <elementProp name="key_word" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${searchText}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">key_word</stringProp>
                  </elementProp>
                  <elementProp name="start_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${startTime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">start_time</stringProp>
                  </elementProp>
                  <elementProp name="end_time" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${endTime}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">end_time</stringProp>
                  </elementProp>
                  <elementProp name="gid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">gid</stringProp>
                  </elementProp>
                  <elementProp name="is_new" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_new</stringProp>
                  </elementProp>
                  <elementProp name="is_search" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_search</stringProp>
                  </elementProp>
                  <elementProp name="is_searchadv" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_searchadv</stringProp>
                  </elementProp>
                  <elementProp name="pagebar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${pageBar}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pagebar</stringProp>
                  </elementProp>
                  <elementProp name="__rnd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1597901313249</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">__rnd</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">gbk</stringProp>
              <stringProp name="HTTPSampler.path">/aj/mblog/fsearch</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将响应结果 unicode 转成中文" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String s=new String(prev.getResponseData(),&quot;UTF-8&quot;);
        char aChar;
        int len= s.length();
        StringBuffer outBuffer=new StringBuffer(len);
        for(int x =0; x &lt;len;){
            aChar= s.charAt(x++);
            if(aChar==&apos;\\&apos;){
                aChar= s.charAt(x++);
                if(aChar==&apos;u&apos;){
                    int value =0;
                    for(int i=0;i&lt;4;i++){
                        aChar= s.charAt(x++);
                        switch(aChar){
                            case&apos;0&apos;:
                            case&apos;1&apos;:
                            case&apos;2&apos;:
                            case&apos;3&apos;:
                            case&apos;4&apos;:
                            case&apos;5&apos;:
                            case&apos;6&apos;:
                            case&apos;7&apos;:
                            case&apos;8&apos;:
                            case&apos;9&apos;:
                                value=(value &lt;&lt;4)+aChar-&apos;0&apos;;
                                break;
                            case&apos;a&apos;:
                            case&apos;b&apos;:
                            case&apos;c&apos;:
                            case&apos;d&apos;:
                            case&apos;e&apos;:
                            case&apos;f&apos;:
                                value=(value &lt;&lt;4)+10+aChar-&apos;a&apos;;
                                break;
                            case&apos;A&apos;:
                            case&apos;B&apos;:
                            case&apos;C&apos;:
                            case&apos;D&apos;:
                            case&apos;E&apos;:
                            case&apos;F&apos;:
                                value=(value &lt;&lt;4)+10+aChar-&apos;A&apos;;
                                break;
                            default:
                                throw new IllegalArgumentException(
                                        &quot;Malformed   \\uxxxx  encoding.&quot;);}}
                    outBuffer.append((char) value);}else{
                    if(aChar==&apos;t&apos;)
                        aChar=&apos;\t&apos;;
                    else if(aChar==&apos;r&apos;)
                    aChar=&apos;\r&apos;;
                    else if(aChar==&apos;n&apos;)
                    aChar=&apos;\n&apos;;
                    else if(aChar==&apos;f&apos;)
                    aChar=&apos;\f&apos;;
                    outBuffer.append(aChar);}}else
                outBuffer.append(aChar);}
        prev.setResponseData(outBuffer.toString());</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则提取 freshMid" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">freshMid</stringProp>
                <stringProp name="RegexExtractor.regex">(?s)&lt;div(.+?)class=&quot;WB_cardwrap(.+?)mid=&quot;(\d+?)&quot;(.+?)&gt;(.+?)&lt;div(.+?)class=&quot;WB_text(.+?)&lt;div class=&quot;WB_like</stringProp>
                <stringProp name="RegexExtractor.template">$3$,$7$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="TestPlan.comments">&lt;div(.+?)class=\\&quot;WB_cardwrap(.+?)mid=\\&quot;(\d+?)\\&quot;(.+?)&gt;(.+?)&lt;div(.+?)class=\\&quot;WB_text(.+?)&lt;div class=\\&quot;WB_like</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="获取新的 lastMid 和 pageBar" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// 更新 lastMid 变量，最后一个 mid 号码
vars.put(&quot;lastMid&quot;, vars.get(&quot;freshMid_&quot; + vars.get(&quot;freshMid_matchNr&quot;) + &quot;_g3&quot;));

// 更新 pageBar
int count = ${__counter(TRUE,)};
vars.put(&quot;pageBar&quot;, &quot;&quot; + count);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将 freshMid 累加进 mid" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// 当前 mid 有多少个，下次从 midCount+1 算起
int midCount = ${currentMidCount};

// freshMid 有多少个
int freshMidCount = ${freshMid_matchNr};

// currentMidCount 变量重新赋值
vars.put(&quot;currentMidCount&quot;, &quot;&quot;+(midCount+freshMidCount));

/**
 * 开始将 freshMid 累加进 mid 中
 */
for (int i = 1; i &lt;= freshMidCount; i++) {
	String tmpId = vars.get(&quot;freshMid_&quot;+i+&quot;_g3&quot;);
	String tmpCtx = vars.get(&quot;freshMid_&quot;+i+&quot;_g7&quot;);
	// 将 freshMid 累加在 mid 中
	vars.put(&quot;mid_&quot;+(i+midCount)+&quot;_g3&quot;, tmpId);
	vars.put(&quot;mid_&quot;+(i+midCount)+&quot;_g7&quot;, tmpCtx);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="已获取${currentMidCount}条，页面显示${blogCount}条微博" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1.展开全文还没解决，但影响不大&#xd;
&#xd;
2.带上话题的代码写的有点小瑕疵，但影响也不大&#xd;
&#xd;
3.抽奖微博有的需要再关注其他人，这个没办法解决&#xd;
&#xd;
4.目前还没发做到 AI 只能识别文字进而去智能评论，这个影响比较大，但是几乎没法解决&#xd;
&#xd;
5.cookies 的情况目前还需要观察，具体多久需要换一次还未知，而且也不知道换了 IP 对 cookies 是否有影响，影响一般&#xd;
&#xd;
6.如何运行会被封 IP 还未知，但需要从两个方面考虑，一个是请求的间隔时间，一个是相同接口的请求的次数，影响比较大&#xd;
&#xd;
7.还没有挂载服务器上让其自动去跑，可以考虑租用个阿里云或者使用在线版 jenkins ，影响一般</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">gbk</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="基本筛选 mid 微博" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;========= 开始 =========&quot;);

/**
 * 原始数据
 */
// 当天抽奖微博总个数
int originNum = ${currentMidCount};

/**
 * 筛除环节
 */
// 不用评论的微博
Map noComMap = new HashMap();
// 需要评论的微博
Map comMap = new HashMap();
// 筛选并存储数组
for (int i = 1,index = 0; i &lt;= originNum; i++) {
	// vars.get(&quot;mid_&quot;+i+&quot;_g3&quot;) 和 vars.get(&quot;mid_&quot;+i+&quot;_g7&quot;)
	String tmpId = vars.get(&quot;mid_&quot;+i+&quot;_g3&quot;);
	String tmpCtx = vars.get(&quot;mid_&quot;+i+&quot;_g7&quot;);
	String value = &quot;&quot;;
	/* 筛除一些微博 */
	
	/* 不用评论 */
	if (!tmpCtx.contains(&quot;评&quot;) &amp;&amp; !tmpCtx.contains(&quot;留言&quot;)) {
		// 如果有 &quot;带话题&quot; 或者 &quot;带#&quot;
		if (tmpCtx.matches(&quot;(?s)^(.*?)带(着|上)?话题(.*?)$&quot;) || tmpCtx.matches(&quot;(?s)^(.*?)带(上?)( ?)&lt;a target=(.*?)$&quot;) || tmpCtx.matches(&quot;(?s)^(.*?)(喊出|参与)(话题)?( ?)&lt;a target=(.*?)$&quot;)) {
			// 有可能出现 “带话题” 之后每有 “#”，可能在前面出现了 “#” 号
			// 如果 &quot;带话题&quot; 后正常有 &quot;#&quot; 号
			// &quot;带话题(.*?)#&quot;
			if (tmpCtx.split(&quot;(带(上?)(话题)?|(参与|喊出)(话题)?)(.*?)#&quot;).length &gt; 1) {
				value = &quot;#&quot;+tmpCtx.split(&quot;(带(上?)(话题)?|(参与|喊出)(话题)?)(.*?)#&quot;)[1].split(&quot;#&quot;)[0]+&quot;#希望中奖希望中奖希望中奖希望中奖....&quot;;
			}
			// 如果带话题后没有 &quot;#&quot; 号
			else {
				if (tmpCtx.contains(&quot;#&quot;)) {
					value = &quot;#&quot;+tmpCtx.split(&quot;#&quot;)[1].split(&quot;#&quot;)[0]+&quot;#希望中奖希望中奖希望中奖希望中奖...&quot;;	
				}
			}
		}
		// 如果没有 &quot;带话题&quot; 或者 &quot;带#&quot;
		else {
			value = &quot;希望中奖希望中奖希望中奖希望中奖....&quot;;
		}
		// 对于不用评论的，需要识别一下是否需要 at 几位好友
		// 如果要 at 一位好友
		if (tmpCtx.matches(&quot;(?s)^(.*?)(@|艾特|圈|圈出|圈上) ?(你的|您的)?(1位|1名|1个|一位|一名|一个)(.*?)$&quot;)) {
			value = value + &quot;@新手指南&quot;;    
		}
		// 如果要 at 两位好友
		else if (tmpCtx.matches(&quot;(?s)^(.*?)(@|艾特|圈|圈出|圈上) ?(你的|您的)?(2位|2名|2个|两位|两名|两个)(.*?)$&quot;)) {
			value = value + &quot;@新手指南@大冶红xin勺&quot;;
		}
		// 如果要 at 三位好友
		else if (tmpCtx.matches(&quot;(?s)^(.*?)(@|艾特|圈|圈出|圈上) ?(你的|您的)?(3位|3名|3个|三位|三名|三个)(.*?)$&quot;)) {
			value = value + &quot;@新手指南@大冶红xin勺@容嬷嬷的微博&quot;;
		}
		noComMap.put(tmpId, value);
		// 还需要保存原始 tmpCtx 数据
		vars.put(tmpId, tmpCtx);
	}
	/* 需要评论的 */
	else {
		//  如果有 &quot;带话题&quot; 或者 &quot;带#&quot;
		if (tmpCtx.matches(&quot;(?s)^(.*?)带(着|上)?话题(.*?)$&quot;) || tmpCtx.matches(&quot;(?s)^(.*?)带(上?)( ?)&lt;a target=(.*?)$&quot;) || tmpCtx.matches(&quot;(?s)^(.*?)(喊出|参与)(话题)?( ?)&lt;a target=(.*?)$&quot;)) {
			// 有可能出现 “带话题” 之后每有 “#”，可能在前面出现了 “#” 号
			// 如果 &quot;带话题&quot; 后正常有 &quot;#&quot; 号
			if (tmpCtx.split(&quot;(带(上?)(话题)?|(参与|喊出)(话题)?)(.*?)#&quot;).length &gt; 1) {
				value = &quot;#&quot;+tmpCtx.split(&quot;(带(上?)(话题)?|(参与|喊出)(话题)?)(.*?)#&quot;)[1].split(&quot;#&quot;)[0]+&quot;#希望中奖!希望中奖!!希望中奖!!!希望中奖!!!!&quot;;
			}
			// 如果带话题后没有 &quot;#&quot; 号
			else {
				if (tmpCtx.contains(&quot;#&quot;)) {
					value = &quot;#&quot;+tmpCtx.split(&quot;#&quot;)[1].split(&quot;#&quot;)[0]+&quot;#希望中奖!希望中奖!!希望中奖!!!希望中奖!!!!&quot;;
				}
			}
		}
		// 如果没有 &quot;带话题&quot; 或者 &quot;带#&quot;
		else {
			value = &quot;希望中奖!希望中奖!!希望中奖!!!希望中奖!!!!&quot;;
		}
		comMap.put(tmpId, value);
		// 还需要保存原始 tmpCtx 数据
		vars.put(tmpId, tmpCtx);
	}
}

/**
 * 分类存储
 */
// 存储不需要评论的
int index = 1;
for (Map.Entry entry : noComMap.entrySet()) {
	vars.put(&quot;noComMid_&quot;+index, &quot;&quot;+entry.getKey());
	vars.put(&quot;noComBody_&quot;+index, &quot;&quot;+entry.getValue());
	index++;
}
vars.put(&quot;noComNums&quot;, &quot;&quot; + (index - 1));

// 存储需要评论的
index = 1;
for (Map.Entry entry : comMap.entrySet()) {
	vars.put(&quot;comMid_&quot;+index, &quot;&quot;+entry.getKey());
	vars.put(&quot;comBody_&quot;+index, &quot;&quot;+entry.getValue());
	index++;
}
vars.put(&quot;comNums&quot;, &quot;&quot; + (index - 1));

log.info(&quot;========= 结束 =========&quot;);

/**
 * 最后参数解释：
 * 
 * noComMid_数字：表示无评论微博的 mid 号码
 * noComBody_数字：表示无评论微博的转发信息
 * 我们还可以通过 mid 号拿到原始微博信息，eg：${234234232}
 * 
 * 
 * comMid_数字：表示有评论微博的 mid 号码
 * comBody_数字，表示有评论微博的转发信息
 * 我们还可以通过 mid 号拿到原始微博信息，eg：${234234232}
 */</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="循环转发（点赞+转发+识别带话题+识别@好友）" enabled="true">
            <stringProp name="ForeachController.inputVal">noComMid</stringProp>
            <stringProp name="ForeachController.returnVal">myNoComMid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__counter(TRUE,)}.点赞微博（无评论），共${noComNums}条" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="location" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">page_100505_home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">location</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">mini</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="qid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">heart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">qid</stringProp>
                  </elementProp>
                  <elementProp name="mid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${myNoComMid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mid</stringProp>
                  </elementProp>
                  <elementProp name="like_src" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">like_src</stringProp>
                  </elementProp>
                  <elementProp name="cuslike" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cuslike</stringProp>
                  </elementProp>
                  <elementProp name="floating" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">floating</stringProp>
                  </elementProp>
                  <elementProp name="_t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/aj/v6/like/add?ajwvr=6&amp;__rnd=1597901313249</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="AI  智能识别原内容并处理" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="每隔0.1s" enabled="true">
                <stringProp name="ConstantTimer.delay">${timerDuration}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="转发微博（无评论）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pic_src" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pic_src</stringProp>
                  </elementProp>
                  <elementProp name="pic_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pic_id</stringProp>
                  </elementProp>
                  <elementProp name="appkey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">appkey</stringProp>
                  </elementProp>
                  <elementProp name="mid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${myNoComMid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mid</stringProp>
                  </elementProp>
                  <elementProp name="style_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">style_type</stringProp>
                  </elementProp>
                  <elementProp name="mark" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mark</stringProp>
                  </elementProp>
                  <elementProp name="reason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__V(noComBody_${__counter(TRUE,)})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">reason</stringProp>
                  </elementProp>
                  <elementProp name="location" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">page_100505_home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">location</stringProp>
                  </elementProp>
                  <elementProp name="pdetail" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1005055240852795</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pdetail</stringProp>
                  </elementProp>
                  <elementProp name="module" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">module</stringProp>
                  </elementProp>
                  <elementProp name="page_module_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page_module_id</stringProp>
                  </elementProp>
                  <elementProp name="refer_sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">refer_sort</stringProp>
                  </elementProp>
                  <elementProp name="rank" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">rank</stringProp>
                  </elementProp>
                  <elementProp name="rankid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">rankid</stringProp>
                  </elementProp>
                  <elementProp name="isReEdit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">isReEdit</stringProp>
                  </elementProp>
                  <elementProp name="_t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/aj/v6/mblog/forward?ajwvr=6&amp;domain=100505&amp;__rnd=1597901313249</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 状态码提取" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">codeStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="原创微博" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="响应经典名句" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">v1.hitokoto.cn</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将响应结果 unicode 转成中文" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String s=new String(prev.getResponseData(),&quot;UTF-8&quot;);
char aChar;
int len= s.length();
StringBuffer outBuffer=new StringBuffer(len);
for(int x =0; x &lt;len;){
  aChar= s.charAt(x++);
  if(aChar==&apos;\\&apos;){
      aChar= s.charAt(x++);
      if(aChar==&apos;u&apos;){
          int value =0;
          for(int i=0;i&lt;4;i++){
              aChar= s.charAt(x++);
              switch(aChar){
                  case&apos;0&apos;:
                  case&apos;1&apos;:
                  case&apos;2&apos;:
                  case&apos;3&apos;:
                  case&apos;4&apos;:
                  case&apos;5&apos;:
                  case&apos;6&apos;:
                  case&apos;7&apos;:
                  case&apos;8&apos;:
                  case&apos;9&apos;:
                      value=(value &lt;&lt;4)+aChar-&apos;0&apos;;
                      break;
                  case&apos;a&apos;:
                  case&apos;b&apos;:
                  case&apos;c&apos;:
                  case&apos;d&apos;:
                  case&apos;e&apos;:
                  case&apos;f&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;a&apos;;
                      break;
                  case&apos;A&apos;:
                  case&apos;B&apos;:
                  case&apos;C&apos;:
                  case&apos;D&apos;:
                  case&apos;E&apos;:
                  case&apos;F&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;A&apos;;
                      break;
                  default:
                      throw new IllegalArgumentException(
                              &quot;Malformed   \\uxxxx  encoding.&quot;);}}
          outBuffer.append((char) value);}else{
          if(aChar==&apos;t&apos;)
              aChar=&apos;\t&apos;;
          else if(aChar==&apos;r&apos;)
          aChar=&apos;\r&apos;;
          else if(aChar==&apos;n&apos;)
          aChar=&apos;\n&apos;;
          else if(aChar==&apos;f&apos;)
          aChar=&apos;\f&apos;;
          outBuffer.append(aChar);}}else
      outBuffer.append(aChar);}
prev.setResponseData(outBuffer.toString());</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json 提取 hitokoto" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hitokoto</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.hitokoto</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">无以言表</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="每隔0.1s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${timerDuration}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发布原创微博" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="title" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">有什么新鲜事想告诉大家?</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">title</stringProp>
                    </elementProp>
                    <elementProp name="location" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">page_100505_home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">location</stringProp>
                    </elementProp>
                    <elementProp name="text" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${hitokoto}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">text</stringProp>
                    </elementProp>
                    <elementProp name="appkey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">appkey</stringProp>
                    </elementProp>
                    <elementProp name="style_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">style_type</stringProp>
                    </elementProp>
                    <elementProp name="pic_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${pic_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pic_id</stringProp>
                    </elementProp>
                    <elementProp name="tid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tid</stringProp>
                    </elementProp>
                    <elementProp name="pdetail" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1005055240852795</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pdetail</stringProp>
                    </elementProp>
                    <elementProp name="mid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">mid</stringProp>
                    </elementProp>
                    <elementProp name="isReEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isReEdit</stringProp>
                    </elementProp>
                    <elementProp name="gif_ids" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">gif_ids</stringProp>
                    </elementProp>
                    <elementProp name="rank" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rank</stringProp>
                    </elementProp>
                    <elementProp name="rankid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rankid</stringProp>
                    </elementProp>
                    <elementProp name="pub_source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">page_2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pub_source</stringProp>
                    </elementProp>
                    <elementProp name="topic_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1022:</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">topic_id</stringProp>
                    </elementProp>
                    <elementProp name="updata_img_num" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">updata_img_num</stringProp>
                    </elementProp>
                    <elementProp name="pub_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">dialog</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pub_type</stringProp>
                    </elementProp>
                    <elementProp name="_t" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_t</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p/aj/v6/mblog/add?ajwvr=6&amp;domain=100505&amp;__rnd=1598573446777</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="即使带图片的微博删除了图片的 id 也依然可用" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String resource = &quot;005IG5dNgy1gi5q1v5hr2j30dw0afgm3;&quot; + 
				&quot;005IG5dNgy1gi5r86r4hbj30et08cgm0;&quot; +
				&quot;005IG5dNgy1gi5rfma7pfj30dw0jm0tv;&quot; +
				&quot;005IG5dNgy1gi5rg871qmj30et08cwf1;&quot; +
				&quot;005IG5dNgy1gi5rgppw3sj30cg08caa5;&quot; +
				&quot;005IG5dNgy1gi5rh6pwqkj30et08cmy3;&quot; +
				&quot;005IG5dNgy1gi5rhox0aij30dw08odgd;&quot; +
				&quot;005IG5dNgy1gi5ri7db6mj30dw0b5aak;&quot; +
				&quot;005IG5dNgy1gi5ripgbioj30dw09egmk;&quot; +
				&quot;005IG5dNgy1gi5rj9qxvwj30dw0aet9a;&quot; +
				&quot;005IG5dNgy1gi5rjqilwnj30dw098q3b;&quot; +
				&quot;005IG5dNgy1gi5rk70kpjj30dw0b1glw;&quot; +
				&quot;005IG5dNgy1gi5rl4f3zyj30dw0afq4d;&quot; +
				&quot;005IG5dNgy1gi5rljuk79j30dw098gm0;&quot; +
				&quot;005IG5dNgy1gi5rm1fhqrj30dw0af74v;&quot; +
				&quot;005IG5dNgy1gi5rmhbk1dj30dw09rgmv;&quot; +
				&quot;005IG5dNgy1gi5rp6uymij30dw09a3yz;&quot; + 
				&quot;005IG5dNgy1gi5rponrljj30dw0agjsm;&quot; + 
				&quot;005IG5dNgy1gi5rq87y2lj30dw099wez;&quot; +
				&quot;005IG5dNgy1gi66hlv55pj30dw08p0t9;&quot;;

// 切割
String[] segment = resource.split(&quot;;&quot;);

// 随机数，随机到 1~segment.length
int index = (int)(Math.random() * segment.length + 1);

vars.put(&quot;pic_id&quot;, segment[index-1]);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if 产生失败的状态码后需要休眠" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(${codeStatus}!=100000)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="----------休息----------" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定延时 65min" enabled="true">
                  <stringProp name="TestPlan.comments">定时器一定要有 sampler 触发</stringProp>
                  <stringProp name="ConstantTimer.delay">3900000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="循环转发（点赞+转发+识别带话题+识别@好友+评论）" enabled="true">
            <stringProp name="ForeachController.inputVal">comMid</stringProp>
            <stringProp name="ForeachController.returnVal">myComMid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__counter(TRUE,)}.点赞微博（有评论），共${comNums}条" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="location" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">page_100505_home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">location</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">mini</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="qid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">heart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">qid</stringProp>
                  </elementProp>
                  <elementProp name="mid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${myComMid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mid</stringProp>
                  </elementProp>
                  <elementProp name="like_src" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">like_src</stringProp>
                  </elementProp>
                  <elementProp name="cuslike" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cuslike</stringProp>
                  </elementProp>
                  <elementProp name="floating" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">floating</stringProp>
                  </elementProp>
                  <elementProp name="_t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/aj/v6/like/add?ajwvr=6&amp;__rnd=1597901313249</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="AI  智能识别原内容并处理" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="每隔0.1s" enabled="true">
                <stringProp name="ConstantTimer.delay">${timerDuration}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="转发微博（有评论）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pic_src" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pic_src</stringProp>
                  </elementProp>
                  <elementProp name="pic_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pic_id</stringProp>
                  </elementProp>
                  <elementProp name="appkey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">appkey</stringProp>
                  </elementProp>
                  <elementProp name="mid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${myComMid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mid</stringProp>
                  </elementProp>
                  <elementProp name="style_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">style_type</stringProp>
                  </elementProp>
                  <elementProp name="mark" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mark</stringProp>
                  </elementProp>
                  <elementProp name="reason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__V(comBody_${__counter(TRUE,)})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">reason</stringProp>
                  </elementProp>
                  <elementProp name="location" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">page_100505_home</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">location</stringProp>
                  </elementProp>
                  <elementProp name="pdetail" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1005055240852795</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pdetail</stringProp>
                  </elementProp>
                  <elementProp name="module" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">module</stringProp>
                  </elementProp>
                  <elementProp name="page_module_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page_module_id</stringProp>
                  </elementProp>
                  <elementProp name="refer_sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">refer_sort</stringProp>
                  </elementProp>
                  <elementProp name="is_comment_base" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">is_comment_base</stringProp>
                  </elementProp>
                  <elementProp name="rank" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">rank</stringProp>
                  </elementProp>
                  <elementProp name="rankid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">rankid</stringProp>
                  </elementProp>
                  <elementProp name="isReEdit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">isReEdit</stringProp>
                  </elementProp>
                  <elementProp name="_t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/aj/v6/mblog/forward?ajwvr=6&amp;domain=100505&amp;__rnd=1597901313249</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 状态码提取" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">codeStatus</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="原创微博" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="响应经典名句" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">v1.hitokoto.cn</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将响应结果 unicode 转成中文" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String s=new String(prev.getResponseData(),&quot;UTF-8&quot;);
char aChar;
int len= s.length();
StringBuffer outBuffer=new StringBuffer(len);
for(int x =0; x &lt;len;){
  aChar= s.charAt(x++);
  if(aChar==&apos;\\&apos;){
      aChar= s.charAt(x++);
      if(aChar==&apos;u&apos;){
          int value =0;
          for(int i=0;i&lt;4;i++){
              aChar= s.charAt(x++);
              switch(aChar){
                  case&apos;0&apos;:
                  case&apos;1&apos;:
                  case&apos;2&apos;:
                  case&apos;3&apos;:
                  case&apos;4&apos;:
                  case&apos;5&apos;:
                  case&apos;6&apos;:
                  case&apos;7&apos;:
                  case&apos;8&apos;:
                  case&apos;9&apos;:
                      value=(value &lt;&lt;4)+aChar-&apos;0&apos;;
                      break;
                  case&apos;a&apos;:
                  case&apos;b&apos;:
                  case&apos;c&apos;:
                  case&apos;d&apos;:
                  case&apos;e&apos;:
                  case&apos;f&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;a&apos;;
                      break;
                  case&apos;A&apos;:
                  case&apos;B&apos;:
                  case&apos;C&apos;:
                  case&apos;D&apos;:
                  case&apos;E&apos;:
                  case&apos;F&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;A&apos;;
                      break;
                  default:
                      throw new IllegalArgumentException(
                              &quot;Malformed   \\uxxxx  encoding.&quot;);}}
          outBuffer.append((char) value);}else{
          if(aChar==&apos;t&apos;)
              aChar=&apos;\t&apos;;
          else if(aChar==&apos;r&apos;)
          aChar=&apos;\r&apos;;
          else if(aChar==&apos;n&apos;)
          aChar=&apos;\n&apos;;
          else if(aChar==&apos;f&apos;)
          aChar=&apos;\f&apos;;
          outBuffer.append(aChar);}}else
      outBuffer.append(aChar);}
prev.setResponseData(outBuffer.toString());</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json 提取 hitokoto" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hitokoto</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.hitokoto</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">无以言表</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="每隔0.1s" enabled="true">
                  <stringProp name="ConstantTimer.delay">${timerDuration}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发布原创微博" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="title" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">有什么新鲜事想告诉大家?</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">title</stringProp>
                    </elementProp>
                    <elementProp name="location" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">page_100505_home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">location</stringProp>
                    </elementProp>
                    <elementProp name="text" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${hitokoto}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">text</stringProp>
                    </elementProp>
                    <elementProp name="appkey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">appkey</stringProp>
                    </elementProp>
                    <elementProp name="style_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">style_type</stringProp>
                    </elementProp>
                    <elementProp name="pic_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${pic_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pic_id</stringProp>
                    </elementProp>
                    <elementProp name="tid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tid</stringProp>
                    </elementProp>
                    <elementProp name="pdetail" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1005055240852795</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pdetail</stringProp>
                    </elementProp>
                    <elementProp name="mid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">mid</stringProp>
                    </elementProp>
                    <elementProp name="isReEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">isReEdit</stringProp>
                    </elementProp>
                    <elementProp name="gif_ids" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">gif_ids</stringProp>
                    </elementProp>
                    <elementProp name="rank" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rank</stringProp>
                    </elementProp>
                    <elementProp name="rankid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rankid</stringProp>
                    </elementProp>
                    <elementProp name="pub_source" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">page_2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pub_source</stringProp>
                    </elementProp>
                    <elementProp name="topic_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1022:</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">topic_id</stringProp>
                    </elementProp>
                    <elementProp name="updata_img_num" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">updata_img_num</stringProp>
                    </elementProp>
                    <elementProp name="pub_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">dialog</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pub_type</stringProp>
                    </elementProp>
                    <elementProp name="_t" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_t</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p/aj/v6/mblog/add?ajwvr=6&amp;domain=100505&amp;__rnd=1598573446777</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="即使带图片的微博删除了图片的 id 也依然可用" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String resource = &quot;005IG5dNgy1gi5q1v5hr2j30dw0afgm3;&quot; + 
				&quot;005IG5dNgy1gi5r86r4hbj30et08cgm0;&quot; +
				&quot;005IG5dNgy1gi5rfma7pfj30dw0jm0tv;&quot; +
				&quot;005IG5dNgy1gi5rg871qmj30et08cwf1;&quot; +
				&quot;005IG5dNgy1gi5rgppw3sj30cg08caa5;&quot; +
				&quot;005IG5dNgy1gi5rh6pwqkj30et08cmy3;&quot; +
				&quot;005IG5dNgy1gi5rhox0aij30dw08odgd;&quot; +
				&quot;005IG5dNgy1gi5ri7db6mj30dw0b5aak;&quot; +
				&quot;005IG5dNgy1gi5ripgbioj30dw09egmk;&quot; +
				&quot;005IG5dNgy1gi5rj9qxvwj30dw0aet9a;&quot; +
				&quot;005IG5dNgy1gi5rjqilwnj30dw098q3b;&quot; +
				&quot;005IG5dNgy1gi5rk70kpjj30dw0b1glw;&quot; +
				&quot;005IG5dNgy1gi5rl4f3zyj30dw0afq4d;&quot; +
				&quot;005IG5dNgy1gi5rljuk79j30dw098gm0;&quot; +
				&quot;005IG5dNgy1gi5rm1fhqrj30dw0af74v;&quot; +
				&quot;005IG5dNgy1gi5rmhbk1dj30dw09rgmv;&quot; +
				&quot;005IG5dNgy1gi5rp6uymij30dw09a3yz;&quot; + 
				&quot;005IG5dNgy1gi5rponrljj30dw0agjsm;&quot; + 
				&quot;005IG5dNgy1gi5rq87y2lj30dw099wez;&quot; +
				&quot;005IG5dNgy1gi66hlv55pj30dw08p0t9;&quot;;

// 切割
String[] segment = resource.split(&quot;;&quot;);

// 随机数，随机到 1~segment.length
int index = (int)(Math.random() * segment.length + 1);

vars.put(&quot;pic_id&quot;, segment[index-1]);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if 产生失败的状态码后需要休眠" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(${codeStatus}!=100000)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="----------休息----------" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定延时 65min" enabled="true">
                  <stringProp name="TestPlan.comments">定时器一定要有 sampler 触发</stringProp>
                  <stringProp name="ConstantTimer.delay">3900000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="for Test" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">300</stringProp>
        </LoopController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__counter(TRUE,)}响应经典名句" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">v1.hitokoto.cn</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="将响应结果 unicode 转成中文" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String s=new String(prev.getResponseData(),&quot;UTF-8&quot;);
char aChar;
int len= s.length();
StringBuffer outBuffer=new StringBuffer(len);
for(int x =0; x &lt;len;){
  aChar= s.charAt(x++);
  if(aChar==&apos;\\&apos;){
      aChar= s.charAt(x++);
      if(aChar==&apos;u&apos;){
          int value =0;
          for(int i=0;i&lt;4;i++){
              aChar= s.charAt(x++);
              switch(aChar){
                  case&apos;0&apos;:
                  case&apos;1&apos;:
                  case&apos;2&apos;:
                  case&apos;3&apos;:
                  case&apos;4&apos;:
                  case&apos;5&apos;:
                  case&apos;6&apos;:
                  case&apos;7&apos;:
                  case&apos;8&apos;:
                  case&apos;9&apos;:
                      value=(value &lt;&lt;4)+aChar-&apos;0&apos;;
                      break;
                  case&apos;a&apos;:
                  case&apos;b&apos;:
                  case&apos;c&apos;:
                  case&apos;d&apos;:
                  case&apos;e&apos;:
                  case&apos;f&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;a&apos;;
                      break;
                  case&apos;A&apos;:
                  case&apos;B&apos;:
                  case&apos;C&apos;:
                  case&apos;D&apos;:
                  case&apos;E&apos;:
                  case&apos;F&apos;:
                      value=(value &lt;&lt;4)+10+aChar-&apos;A&apos;;
                      break;
                  default:
                      throw new IllegalArgumentException(
                              &quot;Malformed   \\uxxxx  encoding.&quot;);}}
          outBuffer.append((char) value);}else{
          if(aChar==&apos;t&apos;)
              aChar=&apos;\t&apos;;
          else if(aChar==&apos;r&apos;)
          aChar=&apos;\r&apos;;
          else if(aChar==&apos;n&apos;)
          aChar=&apos;\n&apos;;
          else if(aChar==&apos;f&apos;)
          aChar=&apos;\f&apos;;
          outBuffer.append(aChar);}}else
      outBuffer.append(aChar);}
prev.setResponseData(outBuffer.toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="json 提取 hitokoto" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">hitokoto</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.hitokoto</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">无以言表</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor1" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String resource = &quot;005IG5dNgy1gi5q1v5hr2j30dw0afgm3;&quot; + 
				&quot;005IG5dNgy1gi5r86r4hbj30et08cgm0;&quot; +
				&quot;005IG5dNgy1gi5rfma7pfj30dw0jm0tv;&quot; +
				&quot;005IG5dNgy1gi5rg871qmj30et08cwf1;&quot; +
				&quot;005IG5dNgy1gi5rgppw3sj30cg08caa5;&quot; +
				&quot;005IG5dNgy1gi5rh6pwqkj30et08cmy3;&quot; +
				&quot;005IG5dNgy1gi5rhox0aij30dw08odgd;&quot; +
				&quot;005IG5dNgy1gi5ri7db6mj30dw0b5aak;&quot; +
				&quot;005IG5dNgy1gi5ripgbioj30dw09egmk;&quot; +
				&quot;005IG5dNgy1gi5rj9qxvwj30dw0aet9a;&quot; +
				&quot;005IG5dNgy1gi5rjqilwnj30dw098q3b;&quot; +
				&quot;005IG5dNgy1gi5rk70kpjj30dw0b1glw;&quot; +
				&quot;005IG5dNgy1gi5rl4f3zyj30dw0afq4d;&quot; +
				&quot;005IG5dNgy1gi5rljuk79j30dw098gm0;&quot; +
				&quot;005IG5dNgy1gi5rm1fhqrj30dw0af74v;&quot; +
				&quot;005IG5dNgy1gi5rmhbk1dj30dw09rgmv;&quot; +
				&quot;005IG5dNgy1gi5rp6uymij30dw09a3yz;&quot; + 
				&quot;005IG5dNgy1gi5rponrljj30dw0agjsm;&quot; + 
				&quot;005IG5dNgy1gi5rq87y2lj30dw099wez;&quot; +
				&quot;005IG5dNgy1gi66hlv55pj30dw08p0t9;&quot;;

// 切割
String[] segment = resource.split(&quot;;&quot;);

// 随机数，随机到 1~segment.length
int index = (int)(Math.random() * segment.length + 1);

vars.put(&quot;pic_id&quot;, segment[index-1]);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor2" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String a = &quot;${hitokoto}&quot;;

String b = &quot;${pic_id}&quot;;

log.info(a);
log.info(b);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发布原创微博" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="title" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">有什么新鲜事想告诉大家?</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">title</stringProp>
                </elementProp>
                <elementProp name="location" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">page_100505_home</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">location</stringProp>
                </elementProp>
                <elementProp name="text" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${hitokoto}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">text</stringProp>
                </elementProp>
                <elementProp name="appkey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">appkey</stringProp>
                </elementProp>
                <elementProp name="style_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">style_type</stringProp>
                </elementProp>
                <elementProp name="pic_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pic_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pic_id</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                </elementProp>
                <elementProp name="pdetail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1005055240852795</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pdetail</stringProp>
                </elementProp>
                <elementProp name="mid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mid</stringProp>
                </elementProp>
                <elementProp name="isReEdit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isReEdit</stringProp>
                </elementProp>
                <elementProp name="gif_ids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">gif_ids</stringProp>
                </elementProp>
                <elementProp name="rank" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rank</stringProp>
                </elementProp>
                <elementProp name="rankid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rankid</stringProp>
                </elementProp>
                <elementProp name="pub_source" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">page_2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pub_source</stringProp>
                </elementProp>
                <elementProp name="topic_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1022:</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">topic_id</stringProp>
                </elementProp>
                <elementProp name="updata_img_num" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">updata_img_num</stringProp>
                </elementProp>
                <elementProp name="pub_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">dialog</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pub_type</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">weibo.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p/aj/v6/mblog/add?ajwvr=6&amp;domain=100505&amp;__rnd=1598573446777</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="即使带图片的微博删除了图片的 id 也依然可用" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String resource = &quot;005IG5dNgy1gi5q1v5hr2j30dw0afgm3;&quot; + 
				&quot;005IG5dNgy1gi5r86r4hbj30et08cgm0;&quot; +
				&quot;005IG5dNgy1gi5rfma7pfj30dw0jm0tv;&quot; +
				&quot;005IG5dNgy1gi5rg871qmj30et08cwf1;&quot; +
				&quot;005IG5dNgy1gi5rgppw3sj30cg08caa5;&quot; +
				&quot;005IG5dNgy1gi5rh6pwqkj30et08cmy3;&quot; +
				&quot;005IG5dNgy1gi5rhox0aij30dw08odgd;&quot; +
				&quot;005IG5dNgy1gi5ri7db6mj30dw0b5aak;&quot; +
				&quot;005IG5dNgy1gi5ripgbioj30dw09egmk;&quot; +
				&quot;005IG5dNgy1gi5rj9qxvwj30dw0aet9a;&quot; +
				&quot;005IG5dNgy1gi5rjqilwnj30dw098q3b;&quot; +
				&quot;005IG5dNgy1gi5rk70kpjj30dw0b1glw;&quot; +
				&quot;005IG5dNgy1gi5rl4f3zyj30dw0afq4d;&quot; +
				&quot;005IG5dNgy1gi5rljuk79j30dw098gm0;&quot; +
				&quot;005IG5dNgy1gi5rm1fhqrj30dw0af74v;&quot; +
				&quot;005IG5dNgy1gi5rmhbk1dj30dw09rgmv;&quot; +
				&quot;005IG5dNgy1gi5rp6uymij30dw09a3yz;&quot; + 
				&quot;005IG5dNgy1gi5rponrljj30dw0agjsm;&quot; + 
				&quot;005IG5dNgy1gi5rq87y2lj30dw099wez;&quot; +
				&quot;005IG5dNgy1gi66hlv55pj30dw08p0t9;&quot;;

// 切割
String[] segment = resource.split(&quot;;&quot;);

// 随机数，随机到 1~segment.length
int index = (int)(Math.random() * segment.length + 1);

vars.put(&quot;pic_id&quot;, segment[index-1]);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 状态码提取" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">codeStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if 产生失败的状态码后需要休眠" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(${codeStatus}!=100000)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="----------休息----------" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定延时 65min" enabled="true">
                <stringProp name="TestPlan.comments">定时器一定要有 sampler 触发</stringProp>
                <stringProp name="ConstantTimer.delay">3900000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
